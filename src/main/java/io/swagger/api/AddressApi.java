/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.46).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Address;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-09-28T16:59:58.194634916Z[GMT]")
@Validated
public interface AddressApi {

    @Operation(summary = "Neue Adresse hinzufügen", description = "Neue Adresse hinzufügen", tags={ "address" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Erfolgreich hinzufügt", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Address.class))),
        
        @ApiResponse(responseCode = "405", description = "Ungültiger Input") })
    @RequestMapping(value = "/address",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }, 
        method = RequestMethod.POST)
    ResponseEntity<Address> addAdress(@Parameter(in = ParameterIn.DEFAULT, description = "Neue Adresse hinzufügen", required=true, schema=@Schema()) @Valid @RequestBody Address body);


    @Operation(summary = "Adresse löschen", description = "", tags={ "address" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "400", description = "Ungültige ID") })
    @RequestMapping(value = "/address/{address_id}",
        method = RequestMethod.DELETE)
    ResponseEntity<Void> deleteAddress(@Parameter(in = ParameterIn.PATH, description = "Adress id to delete", required=true, schema=@Schema()) @PathVariable("product_id") Long productId);


    @Operation(summary = "Adresse finden", description = "", tags={ "address" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Erfolgreich gefunden", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Address.class))),
        
        @ApiResponse(responseCode = "400", description = "Ungültige ID"),
        
        @ApiResponse(responseCode = "404", description = "Adresse nicht gefunden") })
    @RequestMapping(value = "/address/{address_id}",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<Address> findAdress();


    @Operation(summary = "Alle Addressen finden", description = "Gibt ein Array mit allen Adressen aus", tags={ "address" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Erfolgreich gefunden", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Address.class))) })
    @RequestMapping(value = "/address",
        produces = { "application/json", "application/xml" }, 
        method = RequestMethod.GET)
    ResponseEntity<Address> findAllAddresses();


    @Operation(summary = "Adresse updaten", description = "Adresse updaten", tags={ "address" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Update erfolgreich", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Address.class))),
        
        @ApiResponse(responseCode = "400", description = "Ungültige ID"),
        
        @ApiResponse(responseCode = "404", description = "Addresse nicht gefunden"),
        
        @ApiResponse(responseCode = "405", description = "Validation exception") })
    @RequestMapping(value = "/address/{address_id}",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml", "application/x-www-form-urlencoded" }, 
        method = RequestMethod.PUT)
    ResponseEntity<Address> updateAddress(@Parameter(in = ParameterIn.DEFAULT, description = "Adresse updaten", required=true, schema=@Schema()) @Valid @RequestBody Address body);

}

